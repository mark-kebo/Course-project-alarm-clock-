MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;*******************************************************************************
                      00002 ;                                                                              *
                      00003 ;    Filename:  ALARM CLOCK                                                    *
                      00004 ;    Date:      19.10.17                                                       *
                      00005 ;    File Version:   1.7                                                    *
                      00006 ;    Author:         Dmitry Vorozhbicky                                        *
                      00007 ;    Company:        GrSU                                                      *
                      00008 ;                                                                              *
                      00009 ;*******************************************************************************  
                      00010 ;processor    PIC16F877
Warning[205]: Found directive in column 1. (include)
                      00011 include  <P16F877.INC>
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Jul 02 2017
                      00005 ;  MPASM PIC16F877 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2017 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00541         LIST
Warning[205]: Found directive in column 1. (errorlevel)
                      00012 errorlevel   -302
                      00013 ;директивы  типа  контроллера,  под-
                      00014 ;ключения  заголовочного  файла  и  вы-
                      00015 ;вода сообщений об ошибках
                      00016 #define   bank0  bcf STATUS,  RP0
                      00017 #define   bank1  bsf STATUS,  RP0
                      00018 ;директивы, позволяющие заменять в теле  ПО  команды,  указанные  после
                      00019 ;этой  директивы  (bcf  ,  bsf)  –  метками bank0, bank1. Обратную замену производит компилятор
  00000020            00020 WAIT                equ     0x20
  00000023            00021 Reg_1               equ     0x23    ;Регистры, используемые для задержек
  00000024            00022 Reg_2               equ     0x24
  00000025            00023 Reg_3               equ     0x25
  00000026            00024 fCOUNTER            equ     0x26
  00000027            00025 fCOUNTER2           equ     0x27
  00000030            00026 TIME_HH1            equ     0x30    ;Регистр, который хранит значение единиц часов
  00000031            00027 TIME_HH2            equ     0x31    ;Регистр, который хранит значение десятков часов
  00000032            00028 TIME_MM1            equ     0x32    ;Регистр, который хранит значение единиц минут
  00000033            00029 TIME_MM2            equ     0x33    ;Регистр, который хранит значение десятков минут
  00000034            00030 TIME_SS1            equ     0x34    ;Регистр, который хранит значение единиц секунд
  00000035            00031 TIME_SS2            equ     0x35    ;Регистр, который хранит значение десятков секунд
  00000036            00032 DAY                 equ     0x36    ;Регистр, который хранит значение дня недели
  00000037            00033 ALARM_HH1           equ     0x37    ;Регистр, который хранит значение единиц часов для будильника
  00000038            00034 ALARM_HH2           equ     0x38    ;Регистр, который хранит значение десятков часов для будильника
  00000039            00035 ALARM_MM1           equ     0x39    ;Регистр, который хранит значение единиц минут для будильника
  0000003A            00036 ALARM_MM2           equ     0x3A    ;Регистр, который хранит значение десятков минут для будильника
  0000003B            00037 Key1                equ     0x3B    ;Регистры, которые хранят состояние клавиш в драйвере  
  0000003C            00038 Key2                equ     0x3C    ;клавиатуры Keyboard
  0000003D            00039 Key3                equ     0x3D
  0000003E            00040 Key4                equ     0x3E
  0000003F            00041 Key9                equ     0x3F
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000040            00042 Blink               equ     0x40    ;Регистр, для управления морганием элементов экрана
  00000041            00043 Cnt                 equ     0x41    ;Регистр, который хранит состояние клавиши в драйвере (нажата или не
                            т)
  00000042            00044 Blink_Alarm         equ     0x42    ;Управляющий регистр, который выполняет функцию включения\выключения
                             будильника
  00000043            00045 NumPressKey         equ     0x43    ;Управляющий регистр-метка, для посимвольного изменения значений и в
                            ыбора моргающего элемента
  00000044            00046 fCOUNTER1           equ     0x44    ;Регистр используемый для задержек    
  00000045            00047 TEMP_TIME_HH1       equ     0x45    ;Регистры, который хранит значения: часов, минут, секунд основного в
                            ремени;
  00000046            00048 TEMP_TIME_HH2       equ     0x46    ;значение дня и минут, часов будильника. Нужены для сохранения текущ
                            их значений
  00000047            00049 TEMP_TIME_MM1       equ     0x47    ;перед изменением в соответствующих режимах
  00000048            00050 TEMP_TIME_MM2       equ     0x48
  00000049            00051 TEMP_TIME_SS1       equ     0x49
  0000004A            00052 TEMP_TIME_SS2       equ     0x4A
  0000004B            00053 TEMP_DAY            equ     0x4B
  0000004C            00054 TEMP_ALARM_HH1      equ     0x4C
  0000004D            00055 TEMP_ALARM_HH2      equ     0x4D
  0000004E            00056 TEMP_ALARM_MM1      equ     0x4E
  0000004F            00057 TEMP_ALARM_MM2      equ     0x4F
  00000050            00058 NumAlarmBit         equ     0x50    ;Так же, как Blink_Alarm, управляет корректным включением и выключен
                            ием будильника
                      00059     
                      00060 wait  macro     time
                      00061     movlw    (time/5)-1
                      00062     movwf    WAIT
                      00063     call    wait5u
                      00064     endm
                      00065 ;макрос паузы с именем wait. Особенность этого макроса состоит в том, что
                      00066 ;у  него  имеется  параметр  –  time.  При вызове  макроса  значение  параметра
                      00067 ;указывается  после  имени  макроса  в виде  целого  десятичного  числа  крат-
                      00068 ;ного  5  (в  данном  примере).  В  теле макроса  это  число  подставляется  в
                      00069 ;«переменную» time и далее используется вычисленное значение (которое в
                      00070 ;данном случае  выступает  в  роли  константы, записываемой в W). Вместе с
                      00071 ;процедурой  wait5u  длительность  задержки,  обеспечиваемая  макросом
                      00072 ;равна time микросекунд
                      00073     org 0x0000
0000   0183           00074     clrf STATUS
0001   3000           00075     movlw 0x00
0002   008A           00076     movwf PCLATH
0003   2???           00077     goto begin
                      00078 ;Выбор нулевой страницы памяти команд и размещение на ней откомпилированного кода
                      00079 
0004                  00080 begin
0004   1683           00081     bank1                       ;Выбор первого банка памяти. Для вы-
                      00082                                 ;зова используется метка bank1, объяв-
                      00083                                 ;ленная выше директивой #define.
0005   308F           00084     movlw 0x8F                  ;Установка  максимального  времени
0006   0081           00085     movwf OPTION_REG            ;срабатывания  сторожевого  таймера  и его сброс
0007   0064           00086     clrwdt
0008   018B           00087     clrf INTCON                 ;Отключение  прерываний  и  их  обработки
0009   018C           00088     clrf PIE1
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A   018D           00089     clrf PIE2
000B   3000           00090     movlw .0                    ;Конфигурирование  портов  А, В, С, Е, D
000C   0086           00091     movwf TRISB
000D   0087           00092     movwf TRISC
000E   0089           00093     movwf TRISE
000F   30F8           00094     movlw b'11111000' 
0010   0085           00095     movwf TRISA 
0011   3000           00096     movlw b'00000000'           
0012   0088           00097     movwf TRISD
0013   300F           00098     movlw b'00001111'
0014   0081           00099     movwf OPTION_REG
0015   019F           00100     clrf ADCON1 
0016   149F           00101     bsf ADCON1,0x01 
0017   151F           00102     bsf ADCON1,0x02 
0018   1283           00103     bank0                       ;Подготовка к передаче команд на контроллер
0019   01BB           00104     clrf Key1    
001A   01BC           00105     clrf Key2       
001B   01BD           00106     clrf Key3       
001C   01BE           00107     clrf Key4              
001D   01BF           00108     clrf Key9               
001E   01C1           00109     clrf Cnt                
001F   0187           00110     clrf PORTC
0020   0188           00111     clrf PORTD
0021   3001           00112     movlw 0x01
0022   2???           00113     call write
0023   300F           00114     movlw 0x0f
0024   2???           00115     call delay
                      00116 ;Передача команды Clear  Display для очистки дисплея и установки счетчика адреса видеопа-
                      00117 ;мяти  на  нулевой  адрес  (первое  знакоместо  в верхней строке), с необходимой задержкой
0025   0064           00118     clrwdt
0026   3038           00119     movlw 0x38
0027   2???           00120     call write
0028   300F           00121     movlw 0x0f
0029   2???           00122     call delay
                      00123 
                      00124 ;Передача команды Function Set для установки режима  2-х  строчного  индикатора,  размера
                      00125 ;знакоместа 5х7 и 8 разрядной шины данных
002A   3006           00126     movlw 0x06
002B   2???           00127     call write
002C   300F           00128     movlw 0x0f
002D   2???           00129     call delay
                      00130 ;Передача  команды  Entry  Mode  Set  для  установки режима увеличения счетчика адреса ви-
                      00131 ;деопамяти, после каждой записи символа в нее, при неподвижности видеопамяти относительно индикатора
002E   300C           00132     movlw 0x0c
002F   2???           00133     call write
0030   300F           00134     movlw 0x0f
0031   2???           00135     call delay
                      00136 ;Передача  команды  Display  ON/OFF  control для включения дисплея с отключенным курсо-
                      00137 ;ром.  На  этом  этап инициализации дисплея закончен.
0032   3036           00138     movlw       0x36            ;в основной цикл программы
0033   00B7           00139     movwf       ALARM_HH1
0034   3030           00140     movlw       0x30
0035   00B5           00141     movwf       TIME_SS2 
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0036   00B4           00142     movwf       TIME_SS1        ;Присвоение начальных значений регистров времени и дня,
0037   00B9           00143     movwf       ALARM_MM1       ;а так же обнуление управляющих регистров до перехода 
0038   00B5           00144     movwf       TIME_SS2        ;в основной цикл программы
0039   00B0           00145     movwf       TIME_HH1
003A   00B1           00146     movwf       TIME_HH2
003B   00B2           00147     movwf       TIME_MM1
003C   00B3           00148     movwf       TIME_MM2
003D   00B8           00149     movwf       ALARM_HH2
003E   00BA           00150     movwf       ALARM_MM2
003F   3000           00151     movlw       .0
0040   00B6           00152     movwf       DAY
0041   00C2           00153     movwf       Blink_Alarm
0042   00D0           00154     movwf       NumAlarmBit
0043   3000           00155     movlw       b'00000000'
0044   00C0           00156     movwf       Blink
                      00157 
0045                  00158 START                           ;Метка начала основного цикла программы
0045   3000           00159     movlw .0                    ;Записываем значения времени, дня и обнуление управляющего регистра 
0046   00C2           00160     movwf Blink_Alarm           ;в начале каждого прохода основного цикла
0047   0831           00161     movfw TIME_HH2              
0048   00C6           00162     movwf TEMP_TIME_HH2         
0049   0830           00163     movfw TIME_HH1              
004A   00C5           00164     movwf TEMP_TIME_HH1
004B   0833           00165     movfw TIME_MM2              
004C   00C8           00166     movwf TEMP_TIME_MM2
004D   0832           00167     movfw TIME_MM1              
004E   00C7           00168     movwf TEMP_TIME_MM1
004F   0835           00169     movfw TIME_SS2              
0050   00CA           00170     movwf TEMP_TIME_SS2
0051   0834           00171     movfw TIME_SS1              
0052   00C9           00172     movwf TEMP_TIME_SS1
0053   0836           00173     movfw DAY
0054   00CB           00174     movwf TEMP_DAY
0055   3000           00175     movlw 0x00
0056   00C3           00176     movwf NumPressKey           ; NumPressKey каждый раз устанавливаем в начальное значение
0057   0837           00177     movfw ALARM_HH1
0058   00CC           00178     movwf TEMP_ALARM_HH1
0059   0838           00179     movfw ALARM_HH2
005A   00CD           00180     movwf TEMP_ALARM_HH2
005B   0839           00181     movfw ALARM_MM1
005C   00CE           00182     movwf TEMP_ALARM_MM1
005D   083A           00183     movfw ALARM_MM2
005E   00CF           00184     movwf TEMP_ALARM_MM2
                      00185     
005F   2???           00186     call Keyboard               ; Читаем клавиатуру
0060   183B           00187     btfsc Key1,0                ; Проверка нажатия клавиши "1",  если нажата, то переходим 
0061   2???           00188     call time_plus_blink        ; к изменению времени, нет - тогда проверяем клавишу 2
0062   183C           00189     btfsc Key2,0                ; Проверка нажатия клавиши "2",  если нажата, то переходим 
0063   2???           00190     call day_plus_blink         ; к изменению дня недели, нет - тогда проверяем клавишу 3
0064   183D           00191     btfsc Key3,0                ; Проверка нажатия клавиши "3",  если нажата, то переходим 
0065   2???           00192     call alarm_plus_blink       ; к изменению будильника, нет - тогда едем дальше
                      00193         
0066   2???           00194     call LCD_one                ;Отрисовка первой строки на дисплее             
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00195 
                      00196     ;Счет единиц секунд (0-9) - TIME_SS1
0067   0AB4           00197     incf TIME_SS1,1
0068   303A           00198     movlw 0x3A                  ; Выполняем инкремент значения единиц секунд и если
0069   0634           00199     xorwf TIME_SS1, w;          ; это значение !=10, то переходим к метке конца обработки времени 
006A   1D03           00200     btfss STATUS, 0x02          ; Если же значение секунды = 10, то обнуляем его и переходим к обработке
006B   2???           00201     goto end_clock              ; десятков секунд 
006C   3030           00202     movlw 0x30
006D   00B4           00203     movwf TIME_SS1
                      00204 
                      00205     ;Счет десятков секунд (0-5) - TIME_SS2
006E   0AB5           00206     incf TIME_SS2,1             ; Выполняем инкремент значения десятков секунд и если
006F   3036           00207     movlw 0x36                  ; это значение !=6, то переходим к метке конца обработки времени
0070   0635           00208     xorwf TIME_SS2, w;          ; Если же значение секунды = 6, то обнуляем его и переходим к обработке
0071   1D03           00209     btfss STATUS, 0x02          ; единиц минут
0072   2???           00210     goto end_clock
0073   3030           00211     movlw 0x30
0074   00B5           00212     movwf       TIME_SS2
                      00213         
                      00214     ;Счет единиц минут (0-9) - TIME_MM1
0075   0AB2           00215     incf TIME_MM1,1             ; Выполняем инкремент значения единиц минут и если
0076   303A           00216     movlw 0x3A                  ; это значение !=10, то переходим к метке конца обработки времени 
0077   0632           00217     xorwf TIME_MM1, w           ; Если же значение минуты = 10, то обнуляем его и переходим к обработке
0078   1D03           00218     btfss STATUS, 0x02          ; десятков минут
0079   2???           00219     goto end_clock
007A   3030           00220     movlw 0x30
007B   00B2           00221     movwf       TIME_MM1
                      00222 
                      00223     ;Счет десятков минут (0-5) - TIME_MM2
007C   0AB3           00224     incf TIME_MM2,1             ; Выполняем инкремент значения десятков минут и если
007D   3036           00225     movlw 0x36                  ; это значение !=6, то переходим к метке конца обработки времени
007E   0633           00226     xorwf TIME_MM2, w           ; Если же значение минуты = 6, то обнуляем его и переходим к обработке
007F   1D03           00227     btfss STATUS, 0x02          ; единиц часов
0080   2???           00228     goto end_clock
0081   3030           00229     movlw 0x30
0082   00B3           00230     movwf       TIME_MM2
                      00231 
                      00232     ;Счет единиц и десятков часов - TIME_НН2, TIME_НН1
0083   0AB0           00233     incf TIME_HH1,1             ; Выполняем инкремент значения единиц часов и если
0084   3034           00234     movlw 0x34                  ; это значение !=4, то переходим к метке работы с единицами 
0085   0630           00235     xorwf TIME_HH1, w;          ; часов до 10.
0086   1D03           00236     btfss STATUS, 0x02
0087   2???           00237     goto ten_clock
0088   3032           00238     movlw 0x32                  ; Если значение десятков часов !=2, то тка же работаем
0089   0631           00239     xorwf TIME_HH2, w;          ; с форматом до 10, пройдя по метке
008A   1D03           00240     btfss STATUS, 0x02
008B   2???           00241     goto ten_clock
008C   3030           00242     movlw 0x30                  ; Обнуление десятков и единиц часов
008D   00B0           00243     movwf       TIME_HH1
008E   00B1           00244     movwf       TIME_HH2
008F   0AB6           00245     incf    DAY,1               ; Инкремент переменной Деня, для перехода в новый день в 00:00
0090   3007           00246     movlw       .7              ; Обнуление переменной при достижении воскресенья,
0091   0636           00247     xorwf DAY, w;               ; что бы при 00:00:00 перейти в понедельник
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0092   1D03           00248     btfss STATUS, 0x02                   
0093   2???           00249     goto end_clock                      
0094   3000           00250     movlw       .0
0095   00B6           00251     movwf       DAY
0096   2???           00252     goto end_clock
                      00253         
0097                  00254 ten_clock
0097   303A           00255     movlw 0x3A                  ; Если значение единиц часов !=10, то 
0098   0630           00256     xorwf TIME_HH1, w;          ; переходим в конец обработки времени.
0099   1D03           00257     btfss STATUS, 0x02          ; Если значение = 10, то инкрементируем десятки часов
009A   2???           00258     goto end_clock              ; и обнуляем значение единиц
Message[305]: Using default destination of 1 (file).
009B   0AB1           00259     incf    TIME_HH2
009C   3030           00260     movlw 0x30
009D   00B0           00261     movwf       TIME_HH1
                      00262         
009E                  00263 end_clock                       ; Метка конца работы со времинем
009E   0064           00264     clrwdt                      ; Чистим на всякий
                      00265     
                      00266 ;Обработка будильника
009F   3001           00267     movlw .1                    ; Проверяем, равен ли единице управляющий регистр
00A0   0650           00268     xorwf NumAlarmBit, w
00A1   1903           00269     btfsc STATUS, 0x02
00A2   2???           00270     goto inc_BA                 ; Если равен переходим сразу в функцию опроса клавиши 9
00A3   2???           00271     goto if_S_ONE_ZERO          ; Если нет, то проверяем значение секунд
                      00272     
00A4                  00273 if_S_ONE_ZERO                   
00A4   3030           00274     movlw 0x30                  ; Если единицы секунд = 0, то
00A5   0634           00275     xorwf TIME_SS1, w;          ; переходим к проверке десятков секунд, аналогичную проверку
00A6   1903           00276     btfsc STATUS, 0x02          ; выполняем и там. Если не равно 0, то переходим по метке к
00A7   2???           00277     goto if_S_TWO_ZERO          ; концу обработки будильника
00A8   2???           00278     goto end_ALARM    
00A9                  00279 if_S_TWO_ZERO    
00A9   3030           00280     movlw 0x30                  
00AA   0635           00281     xorwf TIME_SS2, w;
00AB   1903           00282     btfsc STATUS, 0x02
00AC   2???           00283     goto if_T_AT_H2             ; Переход к проверке на равенство десятков часов и будильника
00AD   2???           00284     goto end_ALARM     
                      00285         
00AE                  00286 if_T_AT_H2                      ; Если значения десятков будильника и реального времени равны, то
00AE   0831           00287     movfw TIME_HH2              ; переходим к проверке единиц. Если нет, то оканчиваем проверку 
00AF   0638           00288     xorwf ALARM_HH2, w;         ; будильника.
00B0   1903           00289     btfsc STATUS, 0x02          ; Аналогичную проверку проводим и для минут.
00B1   2???           00290     goto if_T_AT_H1
00B2   2???           00291     goto end_ALARM
                      00292     
00B3                  00293 if_T_AT_H1                      ; Проверка единиц часа у часов и будильника
00B3   0830           00294     movfw TIME_HH1              
00B4   0637           00295     xorwf ALARM_HH1, w;         
00B5   1903           00296     btfsc STATUS, 0x02
00B6   2???           00297     goto if_T_AT_M2
00B7   2???           00298     goto end_ALARM
                      00299     
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00B8                  00300 if_T_AT_M2                      ; Проверка десятков минут часов и будильника
00B8   0833           00301     movfw TIME_MM2              
00B9   063A           00302     xorwf ALARM_MM2, w;         
00BA   1903           00303     btfsc STATUS, 0x02
00BB   2???           00304     goto if_T_AT_M1
00BC   2???           00305     goto end_ALARM
                      00306     
00BD                  00307 if_T_AT_M1                      ; Проверка единиц минут часов и будильника
00BD   0832           00308     movfw TIME_MM1              
00BE   0639           00309     xorwf ALARM_MM1, w;         
00BF   1903           00310     btfsc STATUS, 0x02
00C0   2???           00311     goto inc_BA                 ; Если все значения совпали, то переходим к метке,
00C1   2???           00312     goto end_ALARM              ; где присваиваем управляющему регистру Blink_Alarm 
                      00313                                 ; единицу, после чего переходим в функцию
00C2                  00314 inc_BA                          ; опроса клавиатуры, для ожидания нажатия кнопки
00C2   3001           00315     movlw .1                    ; 9, для обнуления управляющих регистров, что
00C3   00C2           00316     movwf Blink_Alarm           ; отключает звуковой сигнал и моргание экрана
00C4   2???           00317     goto blinkON
                      00318     
00C5                  00319 NULL_BA_NAB                     ; Обнуление управляющих регистров
00C5   3000           00320     movlw .0
00C6   00D0           00321     movwf NumAlarmBit
00C7   00C2           00322     movwf Blink_Alarm
00C8   2???           00323     goto end_ALARM
                      00324     
00C9                  00325 blinkON
00C9   2???           00326     call Keyboard           ; Спрашиваем клавиатуру
00CA   183F           00327     btfsc Key9,0
00CB   2???           00328     goto NULL_BA_NAB        ; Если нажали кнопку 9 переходим в функцию, где обнуляем управляющие регистр
                            ы
00CC   3001           00329     movlw .1                ; Если нет, то устанавливаем NumAlarmBit=1 для непрерывного моргания и звуко
                            вого сигнала
00CD   00D0           00330     movwf NumAlarmBit       ; пока не нажата 9.
00CE                  00331 end_ALARM                   ;Метка конца обработки будильника
00CE   2???           00332     call LCD_two            ;Отрисовка второй строки
00CF   2???           00333     call delay_one_sec      ;Задержка пока на 1сек
00D0   2???           00334     goto START              ; конец основного цикла (должен быть = 1сек)
                      00335 
                      00336     ;--------------------------------------------------------
                      00337     ;--------------------------------------------------------
                      00338     
                      00339 ; Процедура типа switch для выбора дня недели
Message[305]: Using default destination of 1 (file).
00D1   0782           00340 DEC addwf PCL
00D2   2???           00341     goto monday
00D3   2???           00342     goto tuesday
00D4   2???           00343     goto wednesday      
00D5   2???           00344     goto thursday    
00D6   2???           00345     goto friday         
00D7   2???           00346     goto saturday               
00D8   2???           00347     goto sunday         
00D9   0008           00348     return
                      00349 ;Отрисовка дней недели
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DA                  00350 monday                      ;понедельник
00DA   304D           00351     movlw 'M'
00DB   2???           00352     call write
00DC   304F           00353     movlw 'O'
00DD   2???           00354     call write
00DE   304E           00355     movlw 'N'
00DF   2???           00356     call write
00E0   2???           00357     goto exday
00E1                  00358 tuesday                     ;вторник
00E1   3054           00359     movlw 'T'
00E2   2???           00360     call write
00E3   3055           00361     movlw 'U'
00E4   2???           00362     call write
00E5   3045           00363     movlw 'E'
00E6   2???           00364     call write
00E7   2???           00365     goto exday
00E8                  00366 wednesday                   ;среда
00E8   3057           00367     movlw 'W'
00E9   2???           00368     call write
00EA   3045           00369     movlw 'E'
00EB   2???           00370     call write
00EC   3044           00371     movlw 'D'
00ED   2???           00372     call write
00EE   2???           00373     goto exday
00EF                  00374 thursday                    ;четверг
00EF   3054           00375     movlw 'T'
00F0   2???           00376     call write
00F1   3048           00377     movlw 'H'
00F2   2???           00378     call write
00F3   3055           00379     movlw 'U'
00F4   2???           00380     call write
00F5   2???           00381     goto exday
00F6                  00382 friday                      ;пятница
00F6   3046           00383     movlw 'F'
00F7   2???           00384     call write
00F8   3052           00385     movlw 'R'
00F9   2???           00386     call write
00FA   3049           00387     movlw 'I'
00FB   2???           00388     call write
00FC   2???           00389     goto exday
00FD                  00390 saturday                    ;суббота
00FD   3053           00391     movlw 'S'
00FE   2???           00392     call write
00FF   3041           00393     movlw 'A'
0100   2???           00394     call write
0101   3054           00395     movlw 'T'
0102   2???           00396     call write
0103   2???           00397     goto exday
0104                  00398 sunday                      ;воскресенье
0104   3053           00399     movlw 'S'
0105   2???           00400     call write
0106   3055           00401     movlw 'U'
0107   2???           00402     call write
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0108   304E           00403     movlw 'N'
0109   2???           00404     call write
010A                  00405 exday                       
010A   0008           00406     return
                      00407 
                      00408     ;--------------------------------------------------------
                      00409     
010B                  00410 time_plus_blink             ; Функция обработки перед переходом в другой режим
010B   3001           00411     movlw 0x1               ; Задержка, для защиты от дребезга
010C   2???           00412     call delay                          
010D   2???           00413     call Keyboard           ;Опрос клавиатуры что бы выяснить отжата клавиша или нет
010E   08C1           00414     movf Cnt,1              ;Если нет, то циклим
010F   1D03           00415     btfss STATUS,Z                      
0110   2???           00416     goto time_plus_blink
0111   0AC3           00417     incf NumPressKey,1      ;Если клавиша отжата, то инкрементируем NumPressKey
0112   2???           00418     goto change_time        ;для выбора ячейки, в которой будут изменяться значения.
0113   0008           00419     return                  ;После чего переходим к изменению времени
                      00420     
0114                  00421 day_plus_blink              ; Функция обработки перед переходом в другой режим
0114   3001           00422     movlw 0x1               ; Задержка, для защиты от дребезга          
0115   2???           00423     call delay                          
0116   2???           00424     call Keyboard           ;Опрос клавиатуры что бы выяснить отжата клавиша или нет
0117   08C1           00425     movf Cnt,1              ;Если нет, то циклим
0118   1D03           00426     btfss STATUS,Z                      
0119   2???           00427     goto day_plus_blink
011A   3008           00428     movlw 0x8               ;Если клавиша отжата, то установим NumPressKey = 8
011B   00C3           00429     movwf NumPressKey       ;для выбора ячейки, в которой будут изменяться значения.
011C   2???           00430     goto change_day         ;После чего переходим к изменению дня недели
011D   0008           00431     return
                      00432     
011E                  00433 alarm_plus_blink            ; Функция обработки перед переходом в другой режим
011E   3001           00434     movlw 0x1               ; Задержка, для защиты от дребезга          
011F   2???           00435     call delay                          
0120   2???           00436     call Keyboard           ;Опрос клавиатуры что бы выяснить отжата клавиша или нет
0121   08C1           00437     movf Cnt,1              ;Если нет, то циклим
0122   1D03           00438     btfss STATUS,Z                      
0123   2???           00439     goto alarm_plus_blink
0124   3009           00440     movlw 0x9               ;Если клавиша отжата, то установим NumPressKey = 9
0125   00C3           00441     movwf NumPressKey       ;для выбора ячейки, в которой будут изменяться значения.
0126   2???           00442     goto change_alarm       ;После чего переходим к изменению будильника
0127   0008           00443     return
                      00444     ;--------------------------------------------------------
                      00445     
0128                  00446 write                       ;Процедура записи байта к контроллер HD
0128   1303           00447     bcf STATUS, RP1
0129   1283           00448     bcf STATUS, RP0
012A   0086           00449     movwf PORTB
012B   1507           00450     bsf PORTC, 2
012C   3001           00451     movlw 0x01
012D   2???           00452     call delay
012E   1107           00453     bcf PORTC, 2
012F   0008           00454     return
                      00455 ; перед вызовом этой процедуры в W помещается байт, который надо записать в HD. Далее
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00456 ;он передается в PORTB и формируется отрицательный перепад на RC2, путем предваритель-
                      00457 ;ной  его  установки  в  «1»,  удержания  этого уровня в течение некоторого времени (опреде-
                      00458 ;ляемого временем задержки delay  при  W=1) и сброса его в «0».
                      00459         
0130                  00460 delay                       ;Процедура  задержки,  время  которой  можно
0130   1303           00461     bcf   STATUS, RP1       ;регулировать, задавая число в W
0131   1283           00462     bcf   STATUS, RP0
0132   00A7           00463     movwf   fCOUNTER2
0133   01A6           00464     clrf    fCOUNTER
                      00465     
0134                  00466 BD_Loop
0134   0064           00467     clrwdt
0135   0BA6           00468     decfsz  fCOUNTER, f
0136   2???           00469     goto    BD_Loop
0137   0BA7           00470     decfsz  fCOUNTER2, f
0138   2???           00471     goto    BD_Loop
0139   0008           00472     return
                      00473 
013A                  00474 delay_one_sec
                      00475  ; Задержка 1 000 000 машинных циклов
013A   30FE           00476     movlw       .254
013B   00A3           00477     movwf       Reg_1
013C   3011           00478     movlw       .17
013D   00A4           00479     movwf       Reg_2
013E   3006           00480     movlw       .6
013F   00A5           00481     movwf       Reg_3
0140   0BA3           00482     decfsz      Reg_1,F
0141   2???           00483     goto        $-1
0142   0064           00484     clrwdt
0143   0BA4           00485     decfsz      Reg_2,F
0144   2???           00486     goto        $-4
0145   0BA5           00487     decfsz      Reg_3,F
0146   2???           00488     goto        $-6
0147   0000           00489     nop
0148   0000           00490     nop
0149   0008           00491     return
                      00492     ;==========================================
                      00493     
014A                  00494 LCD_one
                      00495 ;Установка RC0=0, для последующей передачи команды  на  контроллер  HD.  Передается  ко-
                      00496 ;манда Set DDRAM address,  устанавливающая счетчик  адреса  видеопамяти  на  начало  1-ой 
                      00497 ;строки:  ячейку  с  адресом  (10000000). Это  необходимо  для  вывода  
                      00498 ;времени и дня недели на первой строке индикатора.
014A   1007           00499     bcf PORTC, 0
014B   3080           00500     movlw b'10000000'   
014C   2???           00501     call write
014D   1407           00502     bsf PORTC,0
                      00503 ;Отрисовка первой строки
                      00504 ; Отрисовка Н2
014E   2???           00505     call paintH2
                      00506 ; Отрисовка Н1
014F   2???           00507     call paintH1
0150   303A           00508     movlw ':'
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0151   2???           00509     call write
                      00510 ; Отрисовка М2
0152   2???           00511     call paintM2
                      00512 ; Отрисовка М1
0153   2???           00513     call paintM1
0154   303A           00514     movlw ':'
0155   2???           00515     call write
                      00516 ; Отрисовка S2
0156   2???           00517     call paintS2
                      00518 ; Отрисовка S1
0157   2???           00519     call paintS1
0158   3020           00520     movlw ' '
0159   2???           00521     call write
015A   3020           00522     movlw ' '
015B   2???           00523     call write
                      00524 ;Отрисовка дня недели
015C   2???           00525     call printDay
                      00526 
015D   0008           00527     return
                      00528     
                      00529     ;==========================================
                      00530     
                      00531 ; Собственно механизм последовательного моргания при настройке времени
015E                  00532 paintH2                         ;Моргание десятков часов
015E   3001           00533     movlw 0x1                   ;Если NumPressKey = 1, то включаем моргание
015F   0643           00534     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
0160   1D03           00535     btfss STATUS, 0x02          ;включае один из методов, отвечающих
0161   2???           00536     goto blink_on_H2            ;за отрисовку. Один отрисовывает значение времени,
0162   0AC0           00537     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
0163   1C40           00538     btfss Blink, 0              ;Если NumPressKey != 1, то проверяем следующую функцию
0164   2???           00539     goto blink_on_H2            ;и отрисовываем постоянно значение
0165   2???           00540     goto blink_off_H2
0166                  00541 blink_off_H2
0166   3020           00542     movlw ' '
0167   2???           00543     call write
0168   2???           00544     goto return_H2
0169                  00545 blink_on_H2
0169   0831           00546     movfw TIME_HH2
016A   2???           00547     call write
016B                  00548 return_H2    
016B   0008           00549     return
                      00550     ;-----------
016C                  00551 paintH1                         ;Моргание единиц часов
016C   3002           00552     movlw 0x2                   ;Если NumPressKey = 2, то включаем моргание
016D   0643           00553     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
016E   1D03           00554     btfss STATUS, 0x02          ;включае один из методов, отвечающих
016F   2???           00555     goto blink_on_H1            ;за отрисовку. Один отрисовывает значение времени,
0170   0AC0           00556     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
0171   1C40           00557     btfss Blink, 0              ;Если NumPressKey != 2, то проверяем следующую функцию
0172   2???           00558     goto blink_on_H1            ;и отрисовываем постоянно значение
0173   2???           00559     goto blink_off_H1
0174                  00560 blink_off_H1
0174   3020           00561     movlw ' '
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0175   2???           00562     call write
0176   2???           00563     goto return_H1
0177                  00564 blink_on_H1
0177   0830           00565     movfw TIME_HH1
0178   2???           00566     call write
0179                  00567 return_H1
0179   0008           00568     return
                      00569     ;------------
017A                  00570 paintM2                         ;Моргание десятков минут
017A   3003           00571     movlw 0x3                   ;Если NumPressKey = 3, то включаем моргание
017B   0643           00572     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
017C   1D03           00573     btfss STATUS, 0x02          ;включае один из методов, отвечающих
017D   2???           00574     goto blink_on_M2            ;за отрисовку. Один отрисовывает значение времени,
017E   0AC0           00575     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
017F   1C40           00576     btfss Blink, 0              ;Если NumPressKey != 3, то проверяем следующую функцию
0180   2???           00577     goto blink_on_M2            ;и отрисовываем постоянно значение
0181   2???           00578     goto blink_off_M2
0182                  00579 blink_off_M2
0182   3020           00580     movlw ' '
0183   2???           00581     call write
0184   2???           00582     goto return_M2
0185                  00583 blink_on_M2
0185   0833           00584     movfw TIME_MM2
0186   2???           00585     call write
0187                  00586 return_M2
0187   0008           00587     return
                      00588     ;------------
0188                  00589 paintM1                         ;Моргание единиц минут
0188   3004           00590     movlw 0x4                   ;Если NumPressKey = 4, то включаем моргание
0189   0643           00591     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
018A   1D03           00592     btfss STATUS, 0x02          ;включае один из методов, отвечающих
018B   2???           00593     goto blink_on_M1            ;за отрисовку. Один отрисовывает значение времени,
018C   0AC0           00594     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
018D   1C40           00595     btfss Blink, 0              ;Если NumPressKey != 4, то проверяем следующую функцию
018E   2???           00596     goto blink_on_M1            ;и отрисовываем постоянно значение
018F   2???           00597     goto blink_off_M1
0190                  00598 blink_off_M1
0190   3020           00599     movlw ' '
0191   2???           00600     call write
0192   2???           00601     goto return_M1
0193                  00602 blink_on_M1
0193   0832           00603     movfw TIME_MM1
0194   2???           00604     call write
0195                  00605 return_M1
0195   0008           00606     return
                      00607     ;------------
0196                  00608 paintS2                         ;Моргание десятков секунд
0196   3005           00609     movlw 0x5                   ;Если NumPressKey = 5, то включаем моргание
0197   0643           00610     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
0198   1D03           00611     btfss STATUS, 0x02          ;включае один из методов, отвечающих
0199   2???           00612     goto blink_on_S2            ;за отрисовку. Один отрисовывает значение времени,
019A   0AC0           00613     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
019B   1C40           00614     btfss Blink, 0              ;Если NumPressKey != 5, то проверяем следующую функцию
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

019C   2???           00615     goto blink_on_S2            ;и отрисовываем постоянно значение
019D   2???           00616     goto blink_off_S2
019E                  00617 blink_off_S2
019E   3020           00618     movlw ' '
019F   2???           00619     call write
01A0   2???           00620     goto return_S2
01A1                  00621 blink_on_S2
01A1   0835           00622     movfw TIME_SS2
01A2   2???           00623     call write
01A3                  00624 return_S2
01A3   0008           00625     return
                      00626     ;------------
01A4                  00627 paintS1                         ;Моргание единиц секунд
01A4   3006           00628     movlw 0x6                   ;Если NumPressKey = 6, то включаем моргание
01A5   0643           00629     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
01A6   1D03           00630     btfss STATUS, 0x02          ;включае один из методов, отвечающих
01A7   2???           00631     goto blink_on_S1            ;за отрисовку. Один отрисовывает значение времени,
01A8   0AC0           00632     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
01A9   1C40           00633     btfss Blink, 0              ;Если NumPressKey != 6, то проверяем следующую функцию
01AA   2???           00634     goto blink_on_S1            ;и отрисовываем постоянно значение
01AB   2???           00635     goto blink_off_S1
01AC                  00636 blink_off_S1
01AC   3020           00637     movlw ' '
01AD   2???           00638     call write
01AE   2???           00639     goto return_S1
01AF                  00640 blink_on_S1
01AF   0834           00641     movfw TIME_SS1
01B0   2???           00642     call write
01B1                  00643 return_S1
01B1   0008           00644     return
                      00645     ;-----------
01B2                  00646 printDay                        ;Моргание дня недели
01B2   3008           00647     movlw 0x8                   ;Если NumPressKey = 8, то включаем моргание
01B3   0643           00648     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
01B4   1D03           00649     btfss STATUS, 0x02          ;включае один из методов, отвечающих
01B5   2???           00650     goto blink_on_day           ;за отрисовку. Один отрисовывает значение дня,
01B6   0AC0           00651     incf Blink,1                ;а другой символы пробела. Так создается эффект моргания.
01B7   1C40           00652     btfss Blink, 0              ;Если NumPressKey != 8, то проверяем следующую функцию
01B8   2???           00653     goto blink_on_day           ;и отрисовываем постоянно значение
01B9   2???           00654     goto blink_off_day
01BA                  00655 blink_off_day
01BA   3020           00656     movlw ' '
01BB   2???           00657     call write
01BC   3020           00658     movlw ' '
01BD   2???           00659     call write
01BE   3020           00660     movlw ' '
01BF   2???           00661     call write
01C0   2???           00662     goto return_DAY
01C1                  00663 blink_on_day
01C1   0836           00664     movfw DAY                           
01C2   2???           00665     call DEC
01C3                  00666 return_DAY
01C3   0008           00667     return
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00668     ;==========================================   
                      00669     
01C4                  00670 LCD_two
01C4   1007           00671     bcf PORTC, 0
01C5   30C4           00672     movlw b'11000100'
01C6   2???           00673     call write
                      00674 ;Установка RC0=0, для последующей передачи команды  на  контроллер  HD.  Передается  ко-
                      00675 ;манда Set DDRAM address,  устанавливающая счетчик  адреса  видеопамяти  на  начало  2-ой
                      00676 ;строки:  ячейку  с  адресом  (11000100). Это  необходимо  для  вывода  фразы  «ALARM» и будильника на в
                            торой строке индикатора.
01C7   1407           00677     bsf PORTC,0                 ; установка RC0=1, для последующей передачи
                      00678                                 ;кодов символов второй строки на дисплей. Об-
                      00679                                 ;ратите внимание на то, что нигде не требуется
                      00680                                 ;изменения  банков  памяти: т.к. все регистры, с
                      00681                                 ;которыми работает ПО, находятся в 0-ом банке.
01C8   2???           00682     call paint_ALARM            ;Вызов метода отрисовки
                      00683     
01C9   3020           00684     movlw ' '
01CA   2???           00685     call write
01CB   3020           00686     movlw ' '
01CC   2???           00687     call write
                      00688     
01CD   2???           00689     call paintH2_A              ;Вызов метода отрисовки
01CE   2???           00690     call paintH1_A              ;Вызов метода отрисовки
01CF   303A           00691     movlw ':'
01D0   2???           00692     call write
01D1   2???           00693     call paintM2_A              ;Вызов метода отрисовки
01D2   2???           00694     call paintM1_A              ;Вызов метода отрисовки
01D3   0008           00695     return
                      00696     ;------------------------------------------
01D4                  00697 paintH2_A                       ;Моргание десятков часов будильника
01D4   3009           00698     movlw 0x9                   ;Если NumPressKey = 9, то включаем моргание
01D5   0643           00699     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
01D6   1D03           00700     btfss STATUS, 0x02          ;включае один из методов, отвечающих
01D7   2???           00701     goto blink_on_H2_A          ;за отрисовку. Один отрисовывает значение времени,
01D8   0AC0           00702     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
01D9   1C40           00703     btfss Blink, 0              ;Если NumPressKey != 9, то проверяем следующую функцию
01DA   2???           00704     goto blink_on_H2_A          ;и отрисовываем постоянно значение
01DB   2???           00705     goto blink_off_H2_A
01DC                  00706 blink_off_H2_A
01DC   3020           00707     movlw ' '
01DD   2???           00708     call write
01DE   2???           00709     goto return_A_H2
01DF                  00710 blink_on_H2_A
01DF   0838           00711     movfw ALARM_HH2
01E0   2???           00712     call write
01E1                  00713 return_A_H2
01E1   0008           00714     return
                      00715     ;-----------
01E2                  00716 paintH1_A                       ;Моргание единиц часов будильника
01E2   300A           00717     movlw 0xa                   ;Если NumPressKey = 10, то включаем моргание
01E3   0643           00718     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
01E4   1D03           00719     btfss STATUS, 0x02          ;включае один из методов, отвечающих
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01E5   2???           00720     goto blink_on_H1_A          ;за отрисовку. Один отрисовывает значение времени,
01E6   0AC0           00721     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
01E7   1C40           00722     btfss Blink, 0              ;Если NumPressKey != 10, то проверяем следующую функцию
01E8   2???           00723     goto blink_on_H1_A          ;и отрисовываем постоянно значение
01E9   2???           00724     goto blink_off_H1_A
01EA                  00725 blink_off_H1_A
01EA   3020           00726     movlw ' '
01EB   2???           00727     call write
01EC   2???           00728     goto return_A_H1
01ED                  00729 blink_on_H1_A
01ED   0837           00730     movfw ALARM_HH1
01EE   2???           00731     call write
01EF                  00732 return_A_H1
01EF   0008           00733     return
                      00734     ;------------
01F0                  00735 paintM2_A                       ;Моргание десятков минут будильника
01F0   300B           00736     movlw 0xb                   ;Если NumPressKey = 11, то включаем моргание
01F1   0643           00737     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
01F2   1D03           00738     btfss STATUS, 0x02          ;включае один из методов, отвечающих
01F3   2???           00739     goto blink_on_M2_A          ;за отрисовку. Один отрисовывает значение времени,
01F4   0AC0           00740     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
01F5   1C40           00741     btfss Blink, 0              ;Если NumPressKey != 11, то проверяем следующую функцию
01F6   2???           00742     goto blink_on_M2_A          ;и отрисовываем постоянно значение
01F7   2???           00743     goto blink_off_M2_A
01F8                  00744 blink_off_M2_A
01F8   3020           00745     movlw ' '
01F9   2???           00746     call write
01FA   2???           00747     goto return_A_M2
01FB                  00748 blink_on_M2_A
01FB   083A           00749     movfw ALARM_MM2
01FC   2???           00750     call write
01FD                  00751 return_A_M2
01FD   0008           00752     return
                      00753     ;------------
01FE                  00754 paintM1_A                       ;Моргание единиц минут будильника
01FE   300C           00755     movlw 0xc                   ;Если NumPressKey = 12, то включаем моргание
01FF   0643           00756     xorwf NumPressKey, w;       ;В зависимости от регистра Blink поочередно
0200   1D03           00757     btfss STATUS, 0x02          ;включае один из методов, отвечающих
0201   2???           00758     goto blink_on_M1_A          ;за отрисовку. Один отрисовывает значение времени,
0202   0AC0           00759     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
0203   1C40           00760     btfss Blink, 0              ;Если NumPressKey != 12, то проверяем следующую функцию
0204   2???           00761     goto blink_on_M1_A          ;и отрисовываем постоянно значение
0205   2???           00762     goto blink_off_M1_A
0206                  00763 blink_off_M1_A
0206   3020           00764     movlw ' '
0207   2???           00765     call write
0208   2???           00766     goto return_A_M1
0209                  00767 blink_on_M1_A
0209   0839           00768     movfw ALARM_MM1
020A   2???           00769     call write
020B                  00770 return_A_M1
020B   0008           00771     return
                      00772     ;----------
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

020C                  00773 paint_ALARM                     ;Моргание надписи будильника
020C   3001           00774     movlw .1                    ;Если Blink_Alarm = 1, то включаем моргание
020D   0642           00775     xorwf Blink_Alarm, w;       ;В зависимости от регистра Blink поочередно
020E   1D03           00776     btfss STATUS, 0x02          ;включае один из методов, отвечающих
020F   2???           00777     goto blink_on_ALARM         ;за отрисовку. Один отрисовывает значение времени,
0210   0AC0           00778     incf Blink,1                ;а другой символ пробела. Так создается эффект моргания.
0211   1C40           00779     btfss Blink, 0              ;Если Blink_Alarm != 1, то проверяем следующую функцию
0212   2???           00780     goto blink_on_ALARM         ;и отрисовываем постоянно значение
0213   2???           00781     goto blink_off_ALARM
0214                  00782 blink_off_ALARM
0214   1088           00783     bcf PORTD,0x01
0215   3020           00784     movlw ' '
0216   2???           00785     call write
0217   3020           00786     movlw ' '
0218   2???           00787     call write
0219   3020           00788     movlw ' '
021A   2???           00789     call write
021B   3020           00790     movlw ' '
021C   2???           00791     call write
021D   3020           00792     movlw ' '
021E   2???           00793     call write
021F   2???           00794     goto return_ALARM
0220                  00795 blink_on_ALARM
0220   1488           00796     bsf PORTD,0x01
0221   3041           00797     movlw 'A'
0222   2???           00798     call write
0223   304C           00799     movlw 'L'
0224   2???           00800     call write
0225   3041           00801     movlw 'A'
0226   2???           00802     call write
0227   3052           00803     movlw 'R'
0228   2???           00804     call write
0229   304D           00805     movlw 'M'
022A   2???           00806     call write
022B                  00807 return_ALARM
022B   0008           00808     return
                      00809     ;==========================================
                      00810     
022C                  00811 Keyboard                    ; драйвер клавиатуры для клавиш 1-4, 9
022C   1283           00812     bank0                   ; переход в нулевой банк, для нормального вызова функции из тела программы
022D   1303           00813     bcf STATUS, RP1
022E   01BB           00814     clrf Key1               ; обнуление кодов клавиш
022F   01BC           00815     clrf Key2 
0230   01BD           00816     clrf Key3
0231   01BE           00817     clrf Key4  
0232   01BF           00818     clrf Key9  
0233   01C1           00819     clrf Cnt  
0234                  00820 col1                        ; сканируем первый столбец, где нам нужны клавиши 1, 4
0234   1405           00821     bsf PORTA,0             ; подача питания
0235   1085           00822     bcf PORTA,1
0236   1105           00823     bcf PORTA,2 
                      00824     ;movlw .24
                      00825     ;call small_delay
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0237   0805           00826     movf PORTA,W            ; читаем порт А в W и выполняем поразрядное умножение битов порта на число 0
                            011 1000.
0238   3938           00827     andlw 0x38
0239   1903           00828     btfsc STATUS,Z          ; если Z=1 (т.е. не нажата ни одна из кнопок) переходим на метку col2
023A   2???           00829     goto col2               ; для сканирования второго столбца клавиатуры. Если Z=0, то пропускаем строк
                            у
                      00830     ;movlw .250
                      00831     ;call small_delay  
023B   1985           00832     btfsc PORTA,3           ; определяем нажатия клавиши "1", проводя опрос первой строки
023C   0ABB           00833     incf Key1,F
023D   1A05           00834     btfsc PORTA,4           ; определяем нажатия клавиши "4", проводя опрос второй строки
023E   0ABE           00835     incf Key4,F
                      00836     
023F                  00837 col2                        ; сканируем второй столбец, где нам нужна клавиша 2
023F   1005           00838     bcf PORTA,0             ; подача питания
0240   1485           00839     bsf PORTA,1
0241   1105           00840     bcf PORTA,2 
                      00841     ;movlw .24
                      00842     ;sd
0242   0805           00843     movf PORTA,W            ; читаем порт А в W и выполняем поразрядное умножение битов порта на число 0
                            011 1000.
0243   3938           00844     andlw 0x38
0244   1903           00845     btfsc STATUS,Z          ; если Z=1 (т.е. не нажата ни одна из кнопок) переходим на метку col3
0245   2???           00846     goto col3               ; для сканирования третьего столбца клавиатуры. Если Z=0, то пропускаем стро
                            ку
                      00847     ;movlw .250
                      00848     ;sd
0246   1985           00849     btfsc PORTA,3           ; определяем нажатия клавиши "2", проводя опрос первой строки
0247   0ABC           00850     incf Key2,F
0248                  00851 col3                        ; сканируем третий столбец, где нам нужна клавиша 3
0248   1005           00852     bcf PORTA,0             ; подача питания
0249   1085           00853     bcf PORTA,1
024A   1505           00854     bsf PORTA,2
                      00855     ;movlw .24
                      00856     ;sd
024B   0805           00857     movf PORTA,W            ; читаем порт А в W и выполняем поразрядное умножение битов порта на число 0
                            011 1000.
024C   3938           00858     andlw 0x38
024D   1903           00859     btfsc STATUS,Z          ; если Z=1 (т.е. не нажата ни одна из кнопок) выходим из функции
024E   2???           00860     goto end_keyb           ; если Z=0, то пропускаем строку
                      00861     ;movlw .250
                      00862     ;sd
024F   1985           00863     btfsc PORTA,3           ; определяем нажатия клавиши "3", проводя опрос первой строки
0250   0ABD           00864     incf Key3,F
0251   1A85           00865     btfsc PORTA,5           ; определяем нажатия клавиши "9", проводя опрос третей строки
0252   0ABF           00866     incf Key9,F
                      00867  
0253                  00868 end_keyb                    ;Метод, для записи в Cnt = 1, если нажата клавиша (нужен для преверки, отпущ
                            ена ли клавиша)
0253   183B           00869     btfsc Key1,0
0254   0AC1           00870     incf Cnt,F
0255   183C           00871     btfsc Key2,0
0256   0AC1           00872     incf Cnt,F
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0257   183D           00873     btfsc Key3,0
0258   0AC1           00874     incf Cnt,F
0259   183E           00875     btfsc Key4,0
025A   0AC1           00876     incf Cnt,F
025B   183F           00877     btfsc Key9,0
025C   0AC1           00878     incf Cnt,F
025D   0008           00879     return                  ; выход из функции
                      00880     
                      00881 ;==============================================
                      00882 
025E                  00883 change_time                 ; функция изменения времени
025E   2???           00884     call Keyboard           ; спрашиваем клавиатуру
025F   183B           00885     btfsc Key1,0
0260   2???           00886     call correct_T_plus     ; если нажали кнопку 1 переходим в функцию, которая инкрементирует выбранное
                             число (inc)
0261   183C           00887     btfsc Key2,0
0262   2???           00888     call correct_T_minus    ; если нажали кнопку 2 переходим в функцию, которая декрементирует выбранное
                             число (dec)
0263   183D           00889     btfsc Key3,0
0264   2???           00890     goto save_T             ; переход к другой цифре путем инкремента NPK, при переполнения переменной п
                            роисходит сохранение результата и выход в основной цикл
0265   183E           00891     btfsc Key4,0            ; выход из настройки времени в основной цикл без сохранения результата
0266   2???           00892     goto change_HMS
                      00893     
0267   2???           00894     call LCD_one            ; Отрисовка первой строки
0268   2???           00895     call delay_one_sec          ; задержка пока на 1сек
0269   2???           00896     goto change_time
                      00897     
                      00898     ;----------------------------------------
026A                  00899 correct_T_plus                  ; функция типа switch для ввода отдельных символов(инкремент или прибавл
                            ение)
026A   3001           00900     movlw 0x1                   ;Задержка для борьбы с дребезгом контактов
026B   2???           00901     call delay                          
026C   2???           00902     call Keyboard               ;опрос клавиатуры что бы выяснить
026D   08C1           00903     movf Cnt,1                  ;отжата клавиша или нет
026E   1D03           00904     btfss STATUS,Z              ;если нет, то циклим
026F   2???           00905     goto correct_T_plus             
0270   3001           00906     movlw 0x1                   ; если NumPressKey = 1, то вызываем
0271   0643           00907     xorwf NumPressKey, w;       ; функцию коррекции переменной Н2.
0272   1903           00908     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
0273   2???           00909     call correct_H2
                      00910     
0274   3002           00911     movlw 0x2                   ; если NumPressKey = 2, то вызываем
0275   0643           00912     xorwf NumPressKey, w;       ; функцию коррекции переменной Н1.
0276   1903           00913     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
0277   2???           00914     call correct_H1
                      00915 
0278   3003           00916     movlw 0x3                   ; если NumPressKey = 3, то вызываем
0279   0643           00917     xorwf NumPressKey, w;       ; функцию коррекции переменной M2.
027A   1903           00918     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
027B   2???           00919     call correct_M2
                      00920     
027C   3004           00921     movlw 0x4                   ; если NumPressKey = 4, то вызываем
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

027D   0643           00922     xorwf NumPressKey, w;       ; функцию коррекции переменной M1.
027E   1903           00923     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
027F   2???           00924     call correct_M1
                      00925     
0280   3005           00926     movlw 0x5                   ; если NumPressKey = 5, то вызываем
0281   0643           00927     xorwf NumPressKey, w;       ; функцию коррекции переменной S2.
0282   1903           00928     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
0283   2???           00929     call correct_S2
                      00930     
0284   3006           00931     movlw 0x6                   ; если NumPressKey = 6, то вызываем
0285   0643           00932     xorwf NumPressKey, w;       ; функцию коррекции переменной S1.
0286   1903           00933     btfsc STATUS, 0x02          ; если нет, выходим из функции
0287   2???           00934     call correct_S1
                      00935     
0288   0008           00936     return
                      00937     
                      00938     ;----------------------------------------
                      00939     
0289                  00940 correct_H2                      ; функцию коррекции переменной H2.
0289   0AB1           00941     incf TIME_HH2,1             ; инкремент переменной Н2
028A   3033           00942     movlw 0x33                  ; Если !=3, переходим обратно в функцию
028B   0631           00943     xorwf TIME_HH2, w           ; correct_T_plus и проверяем там следующее условие
028C   1D03           00944     btfss STATUS, 0x02
028D   2???           00945     goto return_COR_H2
028E   3030           00946     movlw       0x30            ; Если переменная = 3, то обнуляем ее, т.к. в сутках 2 десятка часов
028F   00B1           00947     movwf       TIME_HH2
0290                  00948 return_COR_H2
0290   0008           00949     return                      ; и идем обратно в correct_T_plus и проверяем там следующее условие
                      00950     
0291                  00951 correct_H1                      ; функцию коррекции переменной H1.
0291   0AB0           00952     incf TIME_HH1,1             ; инкремент переменной Н1
0292   3032           00953     movlw 0x32                  ; Если = 2, переходим в функцию three_H1, которая служит для 
0293   0631           00954     xorwf TIME_HH2, w           ; корректной задачи времени, т.к. 18 часов может быть, а 28 нет, то надо
                      00955                                 ; ограничить единицы при десятках = 2   
0294   1903           00956     btfsc STATUS, 0x02
0295   2???           00957     goto three_H1                       
0296   303A           00958     movlw 0x3a                  ; есди переменная = 0 или = 1, то максимальная единица для обноления - 9
                            .
0297   0630           00959 t1  xorwf TIME_HH1, w   
0298   1D03           00960     btfss STATUS, 0x02
0299   2???           00961     goto return_COR_H1
029A   3030           00962     movlw       0x30            ; собственно обнуление переменной при достижении 10 или 4 по условию выш
                            е. 
029B   00B0           00963     movwf       TIME_HH1
029C                  00964 return_COR_H1
029C   0008           00965     return
                      00966     
029D                  00967 three_H1
029D   3034           00968     movlw 0x34                  ; предел для обнуления при переменной = 2
029E   2???           00969     goto t1                     ; возврат к метке t1 для продолжения корректной работы
                      00970     
029F                  00971 correct_M2                      ; функцию коррекции переменной M2.
029F   0AB3           00972     incf TIME_MM2,1
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02A0   3036           00973     movlw 0x36                  ; Работает так же, только обнуление происходит при достижении 6
02A1   0633           00974     xorwf TIME_MM2, w;
02A2   1D03           00975     btfss STATUS, 0x02
02A3   2???           00976     goto return_COR_M2
02A4   3030           00977     movlw       0x30
02A5   00B3           00978     movwf       TIME_MM2
02A6                  00979 return_COR_M2
02A6   0008           00980     return
                      00981     
02A7                  00982 correct_M1                      ; функцию коррекции переменной M1.
02A7   0AB2           00983     incf TIME_MM1,1
02A8   303A           00984     movlw 0x3a                  ; Работает так же, только обнуление происходит при достижении 10
02A9   0632           00985     xorwf TIME_MM1, w;
02AA   1D03           00986     btfss STATUS, 0x02
02AB   2???           00987     goto return_COR_M1
02AC   3030           00988     movlw       0x30
02AD   00B2           00989     movwf       TIME_MM1
02AE                  00990 return_COR_M1
02AE   0008           00991     return
                      00992     
02AF                  00993 correct_S2                      ; функцию коррекции переменной S2.
02AF   0AB5           00994     incf TIME_SS2,1
02B0   3036           00995     movlw 0x36                  ; Работает так же, только обнуление происходит при достижении 6
02B1   0635           00996     xorwf TIME_SS2, w;
02B2   1D03           00997     btfss STATUS, 0x02
02B3   2???           00998     goto return_COR_S2
02B4   3030           00999     movlw       0x30
02B5   00B5           01000     movwf       TIME_SS2
02B6                  01001 return_COR_S2
02B6   0008           01002     return
                      01003     
02B7                  01004 correct_S1                      ; функцию коррекции переменной S1.
02B7   0AB4           01005     incf TIME_SS1,1
02B8   303A           01006     movlw 0x3a                  ; Работает так же, только обнуление происходит при достижении 10
02B9   0634           01007     xorwf TIME_SS1, w;
02BA   1D03           01008     btfss STATUS, 0x02
02BB   2???           01009     goto return_COR_S1
02BC   3030           01010     movlw       0x30
02BD   00B4           01011     movwf       TIME_SS1
02BE                  01012 return_COR_S1
02BE   0008           01013     return
                      01014     
                      01015     ;----------------------------------------
                      01016     
02BF                  01017 correct_T_minus                 ; функция типа switch для ввода отдельных символов(декремент)
02BF   3001           01018     movlw 0x1                   ;Задержка для борьбы с дребезгом контактов      
02C0   2???           01019     call delay                          
02C1   2???           01020     call Keyboard               ;опрос клавиатуры что бы выяснить
02C2   08C1           01021     movf Cnt,1                  ;отжата клавиша или нет
02C3   1D03           01022     btfss STATUS,Z              ;если нет, то циклим
02C4   2???           01023     goto correct_T_minus                  
02C5   3001           01024     movlw 0x1                   ; если NumPressKey = 1, то вызываем
02C6   0643           01025     xorwf NumPressKey, w;       ; функцию коррекции переменной Н2.
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C7   1903           01026     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
02C8   2???           01027     call correct_H2_minus
                      01028     
02C9   3002           01029     movlw 0x2                   ; если NumPressKey = 2, то вызываем
02CA   0643           01030     xorwf NumPressKey, w;       ; функцию коррекции переменной Н1.
02CB   1903           01031     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
02CC   2???           01032     call correct_H1_minus
                      01033 
02CD   3003           01034     movlw 0x3                   ; если NumPressKey = 3, то вызываем
02CE   0643           01035     xorwf NumPressKey, w;       ; функцию коррекции переменной M2.
02CF   1903           01036     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
02D0   2???           01037     call correct_M2_minus
                      01038     
02D1   3004           01039     movlw 0x4                   ; если NumPressKey = 4, то вызываем
02D2   0643           01040     xorwf NumPressKey, w;       ; функцию коррекции переменной M1.
02D3   1903           01041     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
02D4   2???           01042     call correct_M1_minus
                      01043     
02D5   3005           01044     movlw 0x5                   ; если NumPressKey = 5, то вызываем
02D6   0643           01045     xorwf NumPressKey, w;       ; функцию коррекции переменной S2.
02D7   1903           01046     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
02D8   2???           01047     call correct_S2_minus
                      01048     
02D9   3006           01049     movlw 0x6                   ; если NumPressKey = 6, то вызываем
02DA   0643           01050     xorwf NumPressKey, w;       ; функцию коррекции переменной S1.
02DB   1903           01051     btfsc STATUS, 0x02          ; если нет, выходим из функции
02DC   2???           01052     call correct_S1_minus
                      01053     
02DD   0008           01054     return
                      01055     ;----------------------------------------
                      01056     
02DE                  01057 correct_H2_minus                ; функцию коррекции переменной H2.
02DE   03B1           01058     decf TIME_HH2,1             ; декремент переменной Н2
02DF   302F           01059     movlw 0x2f                  ; Если !=2f, переходим обратно в функцию
02E0   0631           01060     xorwf TIME_HH2, w           ; correct_T_ и проверяем там следующее условие
02E1   1D03           01061     btfss STATUS, 0x02
02E2   2???           01062     goto return_COR_H2_MIN
02E3   3032           01063     movlw       0x32            ; Если переменная = 2f, то присваиваем ей значение 2, т.к. в сутках 2 де
                            сятка часов
02E4   00B1           01064     movwf       TIME_HH2
02E5                  01065 return_COR_H2_MIN
02E5   0008           01066     return                      ; и идем обратно в correct_T_ и проверяем там следующее условие
                      01067     
02E6                  01068 correct_H1_minus                ; функцию коррекции переменной H1.
02E6   03B0           01069     decf TIME_HH1,1             ; декремент переменной Н1
02E7   302F           01070     movlw 0x2f                  ; Если != 2f, переходим обратно в функцию 
02E8   0630           01071     xorwf TIME_HH1, w           ; correct_T_ и проверяем там следующее условие
                      01072                                         
02E9   1D03           01073     btfss STATUS, 0x02
02EA   2???           01074     goto return_COR_H1_MIN              
02EB   3032           01075     movlw 0x32                  ; если переменная = 2, то при достижении 2f будем присваивать Н1 = 3.
02EC   0631           01076     xorwf TIME_HH2, w   
02ED   1903           01077     btfsc STATUS, 0x02
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02EE   2???           01078     goto three_H1_minus
02EF   3039           01079     movlw       0x39            ; если переменная != 2, то при достижении 2f будем присваивать Н1 = 9. 
02F0   00B0           01080 t2  movwf       TIME_HH1
02F1                  01081 return_COR_H1_MIN
02F1   0008           01082     return
                      01083     
02F2                  01084 three_H1_minus
02F2   3033           01085     movlw 0x33                  ; значение для присваивания при Н2 = 2.
02F3   2???           01086     goto t2                     ; возврат к метке t2 для продолжения корректной работы
                      01087     
02F4                  01088 correct_M2_minus                ; функцию коррекции переменной M2.
02F4   03B3           01089     decf TIME_MM2,1
02F5   302F           01090     movlw 0x2f                  ; Работает так же, только при достижении 2f присваивается 5
02F6   0633           01091     xorwf TIME_MM2, w;
02F7   1D03           01092     btfss STATUS, 0x02
02F8   2???           01093     goto return_COR_M2_MIN
02F9   3035           01094     movlw       0x35
02FA   00B3           01095     movwf       TIME_MM2
02FB                  01096 return_COR_M2_MIN
02FB   0008           01097     return
                      01098     
02FC                  01099 correct_M1_minus                ; функцию коррекции переменной M1.
02FC   03B2           01100     decf TIME_MM1,1
02FD   302F           01101     movlw 0x2f                  ; Работает так же, только при достижении 2f присваивается 10
02FE   0632           01102     xorwf TIME_MM1, w;
02FF   1D03           01103     btfss STATUS, 0x02
0300   2???           01104     goto return_COR_M1_MIN
0301   3039           01105     movlw       0x39
0302   00B2           01106     movwf       TIME_MM1
0303                  01107 return_COR_M1_MIN
0303   0008           01108     return
                      01109     
0304                  01110 correct_S2_minus                ; функцию коррекции переменной S2.
0304   03B5           01111     decf TIME_SS2,1
0305   302F           01112     movlw 0x2f                  ; Работает так же, только при достижении 2f присваивается 5
0306   0635           01113     xorwf TIME_SS2, w;
0307   1D03           01114     btfss STATUS, 0x02
0308   2???           01115     goto return_COR_S2_MIN
0309   3035           01116     movlw       0x35
030A   00B5           01117     movwf       TIME_SS2
030B                  01118 return_COR_S2_MIN
030B   0008           01119     return
                      01120     
030C                  01121 correct_S1_minus                ; функцию коррекции переменной S1.
030C   03B4           01122     decf TIME_SS1,1
030D   302F           01123     movlw 0x2f                  ; Работает так же, только при достижении 2f присваивается 10
030E   0634           01124     xorwf TIME_SS1, w;
030F   1D03           01125     btfss STATUS, 0x02
0310   2???           01126     goto return_COR_S1_MIN
0311   3039           01127     movlw       0x39
0312   00B4           01128     movwf       TIME_SS1
0313                  01129 return_COR_S1_MIN
0313   0008           01130     return
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01131     
                      01132     ;==============================================
                      01133     
0314                  01134 save_T                          ; функция проверки и сохранения времени
0314   3001           01135     movlw 0x1                   ;Задержка для борьбы с дребезгом контактов
0315   2???           01136     call delay                  
0316   2???           01137     call Keyboard               ;опрос клавиатуры что бы выяснить
0317   08C1           01138     movf Cnt,1                  ;отжата клавиша или нет
0318   1D03           01139     btfss STATUS,Z              ;если нет, то циклим
0319   2???           01140     goto save_T
031A   3006           01141     movlw 0x6                   ; если происходит переполнение NumPressKey
031B   0643           01142     xorwf NumPressKey, w        ; значит время заданно корректно во всех ячейках
031C   1903           01143     btfsc STATUS, 0x02          ; и мы переходим в функцию записи переменных значений
031D   2???           01144     goto START                  ; в постоянные
031E   0AC3           01145     incf NumPressKey,1          ; Если NumPressKey не переполнен, то инкрементируем
031F   2???           01146     goto change_time            ; его и возвращаемся в функцию изменения времени
                      01147     
0320                  01148 change_HMS
0320   3001           01149     movlw 0x1                           
0321   2???           01150     call delay                  ;Задержка для борьбы с дребезгом контактов
0322   2???           01151     call Keyboard               ;опрос клавиатуры что бы выяснить
0323   08C1           01152     movf Cnt,1                  ;отжата клавиша или нет
0324   1D03           01153     btfss STATUS,Z              ;если нет, то циклим
0325   2???           01154     goto change_HMS
0326   0846           01155     movfw TEMP_TIME_HH2         ; записываем значения временных переменных в постоянные (NPK 
0327   00B1           01156     movwf TIME_HH2              ; необходим для определения ячейки, в которую записываем
0328   0845           01157     movfw TEMP_TIME_HH1         ; значение)
0329   00B0           01158     movwf TIME_HH1
032A   0848           01159     movfw TEMP_TIME_MM2         
032B   00B3           01160     movwf TIME_MM2
032C   0847           01161     movfw TEMP_TIME_MM1         
032D   00B2           01162     movwf TIME_MM1
032E   084A           01163     movfw TEMP_TIME_SS2         
032F   00B5           01164     movwf TIME_SS2
0330   0849           01165     movfw TEMP_TIME_SS1         
0331   00B4           01166     movwf TIME_SS1
0332   2???           01167     goto START                  ; возврат в основной цикл
                      01168     
                      01169     ;==============================================
                      01170     ;==============================================
                      01171     
0333                  01172 change_day                      ; функция изменения дня недели
0333   2???           01173     call Keyboard
0334   183B           01174     btfsc Key1,0
0335   2???           01175     goto plus_day_ch            ; если нажали кнопку 1 переходим в функцию, которая инкрементирует выбра
                            нное число (inc)
0336   183C           01176     btfsc Key2,0
0337   2???           01177     goto minus_day_ch           ; если нажали кнопку 2 переходим в функцию, которая декрементирует выбра
                            нное число (dec)
0338   183D           01178     btfsc Key3,0                ; если нажали кнопку 3 переходим в функцию, которая сохраняет результат
0339   2???           01179     goto save_end_day
033A   183E           01180     btfsc Key4,0                ; если нажали кнопку 4 переходим в функцию, которая отменяет все изменен
                            ия
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

033B   2???           01181     goto save_day_ch
                      01182     
033C   2???           01183     call LCD_one                ; Отрисовка первой строки на дисплее
033D   2???           01184     call delay_one_sec          ; задержка пока на 1сек
033E   2???           01185     goto change_day
                      01186     
033F                  01187 plus_day_ch
033F   3001           01188     movlw 0x1                           
0340   2???           01189     call delay                  ;Задержка для борьбы с дребезгом контактов
0341   2???           01190     call Keyboard               ;опрос клавиатуры что бы выяснить
0342   08C1           01191     movf Cnt,1                  ;отжата клавиша или нет
0343   1D03           01192     btfss STATUS,Z              ;если нет, то циклим
0344   2???           01193     goto plus_day_ch
0345   0AB6           01194     incf DAY,1                  ;Инкремент регистра День
0346   3007           01195     movlw .7                    ;Если день равен 7, то обнуляем
0347   0636           01196     xorwf DAY, w;               ;после чего возвращаемся в функцию изменения дня
0348   1D03           01197     btfss STATUS, 0x02          ;Если не равен 7, то просто возвращаемся в функцию
0349   2???           01198     goto change_day                     
034A   3000           01199     movlw .0
034B   00B6           01200     movwf DAY
034C   2???           01201     goto change_day
                      01202     
034D                  01203 minus_day_ch
034D   3001           01204     movlw 0x1                           
034E   2???           01205     call delay                  ;Задержка для борьбы с дребезгом контактов
034F   2???           01206     call Keyboard               ;опрос клавиатуры что бы выяснить
0350   08C1           01207     movf Cnt,1                  ;отжата клавиша или нет
0351   1D03           01208     btfss STATUS,Z              ;если нет, то циклим
0352   2???           01209     goto minus_day_ch
0353   03B6           01210     decf DAY,1
0354   30FF           01211     movlw .255                  ;Декремент регистра День
0355   0636           01212     xorwf DAY, w;               ;Если день равен 255, то присваиваем регистру 6
0356   1D03           01213     btfss STATUS, 0x02          ;после чего возвращаемся в функцию изменения дня
0357   2???           01214     goto change_day             ;Если не равен 255, то просто возвращаемся в функцию
0358   3006           01215     movlw .6
0359   00B6           01216     movwf DAY
035A   2???           01217     goto change_day
                      01218     
035B                  01219 save_day_ch
035B   3001           01220     movlw 0x1                           
035C   2???           01221     call delay                  ;Задержка для борьбы с дребезгом контактов
035D   2???           01222     call Keyboard               ;опрос клавиатуры что бы выяснить
035E   08C1           01223     movf Cnt,1                  ;отжата клавиша или нет
035F   1D03           01224     btfss STATUS,Z              ;если нет, то циклим
0360   2???           01225     goto save_day_ch
0361   084B           01226     movfw TEMP_DAY              ;Присваиваем значение временного регистра постоянному
0362   00B6           01227     movwf DAY                   ;что бы отменить изменения и выходим в основной цикл
0363   2???           01228     goto START
                      01229     
0364                  01230 save_end_day
0364   3001           01231     movlw 0x1                           
0365   2???           01232     call delay                  ;Задержка для борьбы с дребезгом контактов
0366   2???           01233     call Keyboard               ;опрос клавиатуры что бы выяснить
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0367   08C1           01234     movf Cnt,1                  ;отжата клавиша или нет
0368   1D03           01235     btfss STATUS,Z              ;если нет, то циклим
0369   2???           01236     goto save_end_day
036A   2???           01237     goto START                  ;Возвращаемся в основной цикл
                      01238     ;==============================================
                      01239     ;==============================================
036B                  01240 change_alarm                    ; функция изменения времени будильника
036B   2???           01241     call Keyboard               ; спрашиваем клавиатуру
036C   183B           01242     btfsc Key1,0
036D   2???           01243     call correct_A_plus         ; если нажали кнопку 1 переходим в функцию, которая инкрементирует выбра
                            нное число (inc)
036E   183C           01244     btfsc Key2,0
036F   2???           01245     call correct_A_minus        ; если нажали кнопку 2 переходим в функцию, которая декрементирует выбра
                            нное число (dec)
0370   183D           01246     btfsc Key3,0
0371   2???           01247     goto save_A                 ; переход к другой цифре путем инкремента NPK, при переполнения переменн
                            ой происходит сохранение результата и выход в основной цикл
0372   183E           01248     btfsc Key4,0                ; выход из настройки времени в основной цикл без сохранения результата
0373   2???           01249     goto change_AHMS
                      01250     
0374   2???           01251     call LCD_two                ; отрисовка второй строки
                      01252     
0375   2???           01253     call delay_one_sec          ; задержка пока на 1сек
0376   2???           01254     goto change_alarm
                      01255     
                      01256     ;----------------------------------------
                      01257     
0377                  01258 correct_A_plus                  ; функция типа switch для ввода отдельных символов(инкремент или прибавл
                            ение)
0377   3001           01259     movlw 0x1                   ;Задержка для борьбы с дребезгом контактов      
0378   2???           01260     call delay                  
0379   2???           01261     call Keyboard               ;опрос клавиатуры что бы выяснить
037A   08C1           01262     movf Cnt,1                  ;отжата клавиша или нет
037B   1D03           01263     btfss STATUS,Z              ;если нет, то циклим
037C   2???           01264     goto correct_A_plus                     
037D   3009           01265     movlw 0x9                   ; если NumPressKey = 9, то вызываем
037E   0643           01266     xorwf NumPressKey, w;       ; функцию коррекции переменной Н2.
037F   1903           01267     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
0380   2???           01268     call correct_H2_A
                      01269     
0381   300A           01270     movlw 0xa                   ; если NumPressKey = а, то вызываем
0382   0643           01271     xorwf NumPressKey, w;       ; функцию коррекции переменной Н1.
0383   1903           01272     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
0384   2???           01273     call correct_H1_A
                      01274 
0385   300B           01275     movlw 0xb                   ; если NumPressKey = b, то вызываем
0386   0643           01276     xorwf NumPressKey, w;       ; функцию коррекции переменной M2.
0387   1903           01277     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
0388   2???           01278     call correct_M2_A
                      01279     
0389   300C           01280     movlw 0xc                   ; если NumPressKey = c, то вызываем
038A   0643           01281     xorwf NumPressKey, w;       ; функцию коррекции переменной M1.
038B   1903           01282     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

038C   2???           01283     call correct_M1_A
                      01284     
038D   0008           01285     return
                      01286     
                      01287     ;----------------------------------------
                      01288     
038E                  01289 correct_H2_A                    ; функцию коррекции переменной H2.
038E   0AB8           01290     incf ALARM_HH2,1            ; инкремент переменной Н2
038F   3033           01291     movlw 0x33                  ; Если !=3, переходим обратно в функцию
0390   0638           01292     xorwf ALARM_HH2, w          ; correct_A_plus и проверяем там следующее условие
0391   1D03           01293     btfss STATUS, 0x02
0392   2???           01294     goto return_COR_H2_A
0393   3030           01295     movlw       0x30            ; Если переменная = 3, то обнуляем ее, т.к. в сутках 2 десятка часов
0394   00B8           01296     movwf       ALARM_HH2
0395                  01297 return_COR_H2_A
0395   0008           01298     return                      ; и идем обратно в correct_A_plus и проверяем там следующее условие
                      01299     
0396                  01300 correct_H1_A                    ; функцию коррекции переменной H1.
0396   0AB7           01301     incf ALARM_HH1,1            ; инкремент переменной Н1
0397   3032           01302     movlw 0x32                  ; Если = 2, переходим в функцию three_H1_A, которая служит для 
0398   0638           01303     xorwf ALARM_HH2, w          ; корректной задачи времени, т.к. 18 часов может быть, а 28 нет, то надо
                      01304                                 ; ограничить единицы при десятках = 2   
0399   1903           01305     btfsc STATUS, 0x02
039A   2???           01306     goto three_H1_A                     
039B   303A           01307     movlw 0x3a                  ; есди переменная = 0 или = 1, то максимальная единица для обнyления - 9
                            .
039C   0637           01308 ta1 xorwf ALARM_HH1, w  
039D   1D03           01309     btfss STATUS, 0x02
039E   2???           01310     goto return_COR_H1_A
039F   3030           01311     movlw       0x30            ; собственно обнуление переменной при достижении 10 или 4 по условию выш
                            е. 
03A0   00B7           01312     movwf       ALARM_HH1
03A1                  01313 return_COR_H1_A
03A1   0008           01314     return
                      01315     
03A2                  01316 three_H1_A
03A2   3034           01317     movlw 0x34                  ; предел для обнуления при переменной = 2
03A3   2???           01318     goto ta1                    ; возврат к метке ta1 для продолжения корректной работы
                      01319     
03A4                  01320 correct_M2_A                    ; функцию коррекции переменной M2.
03A4   0ABA           01321     incf ALARM_MM2,1
03A5   3036           01322     movlw 0x36                  ; Работает так же, только обнуление происходит при достижении 6
03A6   063A           01323     xorwf ALARM_MM2, w;
03A7   1D03           01324     btfss STATUS, 0x02
03A8   2???           01325     goto return_COR_M2_A
03A9   3030           01326     movlw       0x30
03AA   00BA           01327     movwf       ALARM_MM2
03AB                  01328 return_COR_M2_A
03AB   0008           01329     return
                      01330     
03AC                  01331 correct_M1_A                    ; функцию коррекции переменной M1.
03AC   0AB9           01332     incf ALARM_MM1,1
03AD   303A           01333     movlw 0x3a                  ; Работает так же, только обнуление происходит при достижении 10
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03AE   0639           01334     xorwf ALARM_MM1, w;
03AF   1D03           01335     btfss STATUS, 0x02
03B0   2???           01336     goto return_COR_M1_A
03B1   3030           01337     movlw       0x30
03B2   00B9           01338     movwf       ALARM_MM1
03B3                  01339 return_COR_M1_A
03B3   0008           01340     return
                      01341     
                      01342     ;----------------------------------------
                      01343     
03B4                  01344 correct_A_minus                 ; функция типа switch для ввода отдельных символов(декремент)
03B4   3001           01345     movlw 0x1                   ;Задержка для борьбы с дребезгом контактов
03B5   2???           01346     call delay                          
03B6   2???           01347     call Keyboard               ;опрос клавиатуры что бы выяснить
03B7   08C1           01348     movf Cnt,1                  ;отжата клавиша или нет
03B8   1D03           01349     btfss STATUS,Z              ;если нет, то циклим
03B9   2???           01350     goto correct_A_minus
03BA   3009           01351     movlw 0x9                   ; если NumPressKey = 9, то вызываем
03BB   0643           01352     xorwf NumPressKey, w;       ; функцию коррекции переменной Н2.
03BC   1903           01353     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
03BD   2???           01354     call correct_H2_minus_A
                      01355     
03BE   300A           01356     movlw 0xa                   ; если NumPressKey = a, то вызываем
03BF   0643           01357     xorwf NumPressKey, w;       ; функцию коррекции переменной Н1.
03C0   1903           01358     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
03C1   2???           01359     call correct_H1_minus_A
                      01360 
03C2   300B           01361     movlw 0xb                   ; если NumPressKey = b, то вызываем
03C3   0643           01362     xorwf NumPressKey, w;       ; функцию коррекции переменной M2.
03C4   1903           01363     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
03C5   2???           01364     call correct_M2_minus_A
                      01365     
03C6   300C           01366     movlw 0xc                   ; если NumPressKey = c, то вызываем
03C7   0643           01367     xorwf NumPressKey, w;       ; функцию коррекции переменной M1.
03C8   1903           01368     btfsc STATUS, 0x02          ; если нет, проверяем следующее условие
03C9   2???           01369     call correct_M1_minus_A
                      01370     
03CA   0008           01371     return
                      01372     
                      01373     ;----------------------------------------
                      01374     
03CB                  01375 correct_H2_minus_A              ; функцию коррекции переменной H2.
03CB   03B8           01376     decf ALARM_HH2,1            ; декремент переменной Н2
03CC   302F           01377     movlw 0x2f                  ; Если !=2f, переходим обратно в функцию
03CD   0638           01378     xorwf ALARM_HH2, w          ; correct_А_minus и проверяем там следующее условие
03CE   1D03           01379     btfss STATUS, 0x02
03CF   2???           01380     goto return_COR_H2_A_minus
03D0   3032           01381     movlw       0x32            ; Если переменная = 2f, то присваиваем ей значение 2, т.к. в сутках 2 де
                            сятка часов
03D1   00B8           01382     movwf       ALARM_HH2
03D2                  01383 return_COR_H2_A_minus
03D2   0008           01384     return                      ; и идем обратно в correct_А_minus и проверяем там следующее условие
                      01385     
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03D3                  01386 correct_H1_minus_A              ; функцию коррекции переменной H1.
03D3   03B7           01387     decf ALARM_HH1,1            ; декремент переменной Н1
03D4   302F           01388     movlw 0x2f                  ; Если != 2f, переходим обратно в функцию 
03D5   0637           01389     xorwf ALARM_HH1, w          ; correct_А_minus и проверяем там следующее условие
                      01390                                         
03D6   1D03           01391     btfss STATUS, 0x02
03D7   2???           01392     goto return_COR_H1_A_minus          
03D8   3032           01393     movlw 0x32                  ; если переменная = 2, то при достижении 2f будем присваивать Н1 = 3.
03D9   0638           01394     xorwf ALARM_HH2, w  
03DA   1903           01395     btfsc STATUS, 0x02
03DB   2???           01396     goto three_H1_minus_A
03DC   3039           01397     movlw       0x39            ; если переменная != 2, то при достижении 2f будем присваивать Н1 = 9. 
03DD   00B7           01398 ta2 movwf       ALARM_HH1
03DE                  01399 return_COR_H1_A_minus
03DE   0008           01400     return
                      01401     
03DF                  01402 three_H1_minus_A
03DF   3033           01403     movlw 0x33                  ; значение для присваивания при Н2 = 2.
03E0   2???           01404     goto ta2                    ; возврат к метке tа2 для продолжения корректной работы
                      01405     
03E1                  01406 correct_M2_minus_A              ; функцию коррекции переменной M2.
03E1   03BA           01407     decf ALARM_MM2,1
03E2   302F           01408     movlw 0x2f                  ; Работает так же, только при достижении 2f присваивается 5
03E3   063A           01409     xorwf ALARM_MM2, w;
03E4   1D03           01410     btfss STATUS, 0x02
03E5   2???           01411     goto return_COR_M2_A_minus
03E6   3035           01412     movlw       0x35
03E7   00BA           01413     movwf       ALARM_MM2
03E8                  01414 return_COR_M2_A_minus
03E8   0008           01415     return
                      01416     
03E9                  01417 correct_M1_minus_A              ; функцию коррекции переменной M1.
03E9   03B9           01418     decf ALARM_MM1,1
03EA   302F           01419     movlw 0x2f                  ; Работает так же, только при достижении 2f присваивается 10
03EB   0639           01420     xorwf ALARM_MM1, w;
03EC   1D03           01421     btfss STATUS, 0x02
03ED   2???           01422     goto return_COR_M1_A_minus
03EE   3039           01423     movlw       0x39
03EF   00B9           01424     movwf       ALARM_MM1
03F0                  01425 return_COR_M1_A_minus
03F0   0008           01426     return
                      01427     
                      01428     ;==============================================
                      01429     
03F1                  01430 save_A                          ; функция проверки и сохранения времени
03F1   3001           01431     movlw 0x1                   ;Задержка для борьбы с дребезгом контактов      
03F2   2???           01432     call delay                          
03F3   2???           01433     call Keyboard               ;опрос клавиатуры что бы выяснить
03F4   08C1           01434     movf Cnt,1                  ;отжата клавиша или нет
03F5   1D03           01435     btfss STATUS,Z              ;если нет, то циклим
03F6   2???           01436     goto save_A
03F7   300D           01437     movlw 0xd                   ; если происходит переполнение NumPressKey
03F8   0643           01438     xorwf NumPressKey, w        ; значит время заданно корректно во всех ячейках
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03F9   1903           01439     btfsc STATUS, 0x02          ; и мы выходим из меню настройки
03FA   2???           01440     goto START                  
03FB   0AC3           01441     incf NumPressKey,1          ; Если NumPressKey не переполнен, то инкрементируем
03FC   2???           01442     goto change_alarm           ; его и возвращаемся в функцию изменения времени
                      01443     
03FD                  01444 change_AHMS
03FD   3001           01445     movlw 0x1                           
03FE   2???           01446     call delay                  ;Задержка для борьбы с дребезгом контактов
03FF   2???           01447     call Keyboard               ;опрос клавиатуры что бы выяснить
0400   08C1           01448     movf Cnt,1                  ;отжата клавиша или нет
0401   1D03           01449     btfss STATUS,Z              ;если нет, то циклим
0402   2???           01450     goto change_AHMS
0403   084D           01451     movfw TEMP_ALARM_HH2        ; записываем значения временных переменных в постоянные (NPK 
0404   00B8           01452     movwf ALARM_HH2             ; необходим для определения ячейки, в которую записываем
0405   084C           01453     movfw TEMP_ALARM_HH1        ; значение)
0406   00B7           01454     movwf ALARM_HH1
0407   084F           01455     movfw TEMP_ALARM_MM2                
0408   00BA           01456     movwf ALARM_MM2
0409   084E           01457     movfw TEMP_ALARM_MM1                
040A   00B9           01458     movwf ALARM_MM1
040B   2???           01459     goto START                  ; возврат в основной цикл
                      01460     
                      01461     ;==============================================
                      01462     ;==============================================
                      01463                             
                      01464 ;small_delay:                   ; задержка для драйвера
                      01465 ;    movwf fCOUNTER1
                      01466 ;    clrwdt
                      01467 ;    decfsz fCOUNTER1,F
                      01468 ;    goto $-2
                      01469 ;    return
                      01470     
Warning[205]: Found directive in column 1. (end)
                      01471 end  ; конец программы
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 30


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ALARM_HH1                         00000037
ALARM_HH2                         00000038
ALARM_MM1                         00000039
ALARM_MM2                         0000003A
BCLIE                             00000003
BCLIF                             00000003
BD_Loop                           00000134
BF                                00000000
BRGH                              00000002
Blink                             00000040
Blink_Alarm                       00000042
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 31


SYMBOL TABLE
  LABEL                             VALUE 

CKE                               00000006
CKP                               00000004
CREN                              00000004
CSRC                              00000007
Cnt                               00000041
D                                 00000005
DATA_ADDRESS                      00000005
DAY                               00000036
DC                                00000001
DEC                               000000D1
D_A                               00000005
D_NOT_A                           00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FERR                              00000002
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
GO_NOT_DONE                       00000002
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
Key1                              0000003B
Key2                              0000003C
Key3                              0000003D
Key4                              0000003E
Key9                              0000003F
Keyboard                          0000022C
LCD_one                           0000014A
LCD_two                           000001C4
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 32


SYMBOL TABLE
  LABEL                             VALUE 

NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NULL_BA_NAB                       000000C5
NumAlarmBit                       00000050
NumPressKey                       00000043
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RB0                               00000000
RB1                               00000001
RB2                               00000002
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 33


SYMBOL TABLE
  LABEL                             VALUE 

RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RE0                               00000000
RE1                               00000001
RE2                               00000002
READ_WRITE                        00000002
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
Reg_1                             00000023
Reg_2                             00000024
Reg_3                             00000025
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 34


SYMBOL TABLE
  LABEL                             VALUE 

SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
START                             00000045
STATUS                            00000003
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TEMP_ALARM_HH1                    0000004C
TEMP_ALARM_HH2                    0000004D
TEMP_ALARM_MM1                    0000004E
TEMP_ALARM_MM2                    0000004F
TEMP_DAY                          0000004B
TEMP_TIME_HH1                     00000045
TEMP_TIME_HH2                     00000046
TEMP_TIME_MM1                     00000047
TEMP_TIME_MM2                     00000048
TEMP_TIME_SS1                     00000049
TEMP_TIME_SS2                     0000004A
TIME_HH1                          00000030
TIME_HH2                          00000031
TIME_MM1                          00000032
TIME_MM2                          00000033
TIME_SS1                          00000034
TIME_SS2                          00000035
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 35


SYMBOL TABLE
  LABEL                             VALUE 

TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 36


SYMBOL TABLE
  LABEL                             VALUE 

TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WAIT                              00000020
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_.org_0_0141                      00000141
_.org_0_0144                      00000144
_.org_0_0146                      00000146
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_BOREN_OFF                        00003FBF
_BOREN_ON                         00003FFF
_CONFIG                           00002007
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_DEVID1                           00002006
_FOSC_EXTRC                       00003FFF
_FOSC_HS                          00003FFE
_FOSC_LP                          00003FFC
_FOSC_XT                          00003FFD
_HS_OSC                           00003FFE
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDTE_OFF                         00003FFB
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_WRT_OFF                          00003DFF
_WRT_ON                           00003FFF
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 37


SYMBOL TABLE
  LABEL                             VALUE 

_XT_OSC                           00003FFD
__16F877                          00000001
__DEBUG                           
__MPLAB_DEBUGGER_SIMULATOR        1
alarm_plus_blink                  0000011E
bank0                             bcf STATUS,  RP0
bank1                             bsf STATUS,  RP0
begin                             00000004
blinkON                           000000C9
blink_off_ALARM                   00000214
blink_off_H1                      00000174
blink_off_H1_A                    000001EA
blink_off_H2                      00000166
blink_off_H2_A                    000001DC
blink_off_M1                      00000190
blink_off_M1_A                    00000206
blink_off_M2                      00000182
blink_off_M2_A                    000001F8
blink_off_S1                      000001AC
blink_off_S2                      0000019E
blink_off_day                     000001BA
blink_on_ALARM                    00000220
blink_on_H1                       00000177
blink_on_H1_A                     000001ED
blink_on_H2                       00000169
blink_on_H2_A                     000001DF
blink_on_M1                       00000193
blink_on_M1_A                     00000209
blink_on_M2                       00000185
blink_on_M2_A                     000001FB
blink_on_S1                       000001AF
blink_on_S2                       000001A1
blink_on_day                      000001C1
change_AHMS                       000003FD
change_HMS                        00000320
change_alarm                      0000036B
change_day                        00000333
change_time                       0000025E
col1                              00000234
col2                              0000023F
col3                              00000248
correct_A_minus                   000003B4
correct_A_plus                    00000377
correct_H1                        00000291
correct_H1_A                      00000396
correct_H1_minus                  000002E6
correct_H1_minus_A                000003D3
correct_H2                        00000289
correct_H2_A                      0000038E
correct_H2_minus                  000002DE
correct_H2_minus_A                000003CB
correct_M1                        000002A7
correct_M1_A                      000003AC
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 38


SYMBOL TABLE
  LABEL                             VALUE 

correct_M1_minus                  000002FC
correct_M1_minus_A                000003E9
correct_M2                        0000029F
correct_M2_A                      000003A4
correct_M2_minus                  000002F4
correct_M2_minus_A                000003E1
correct_S1                        000002B7
correct_S1_minus                  0000030C
correct_S2                        000002AF
correct_S2_minus                  00000304
correct_T_minus                   000002BF
correct_T_plus                    0000026A
day_plus_blink                    00000114
delay                             00000130
delay_one_sec                     0000013A
end_ALARM                         000000CE
end_clock                         0000009E
end_keyb                          00000253
exday                             0000010A
fCOUNTER                          00000026
fCOUNTER1                         00000044
fCOUNTER2                         00000027
friday                            000000F6
if_S_ONE_ZERO                     000000A4
if_S_TWO_ZERO                     000000A9
if_T_AT_H1                        000000B3
if_T_AT_H2                        000000AE
if_T_AT_M1                        000000BD
if_T_AT_M2                        000000B8
inc_BA                            000000C2
minus_day_ch                      0000034D
monday                            000000DA
paintH1                           0000016C
paintH1_A                         000001E2
paintH2                           0000015E
paintH2_A                         000001D4
paintM1                           00000188
paintM1_A                         000001FE
paintM2                           0000017A
paintM2_A                         000001F0
paintS1                           000001A4
paintS2                           00000196
paint_ALARM                       0000020C
plus_day_ch                       0000033F
printDay                          000001B2
return_ALARM                      0000022B
return_A_H1                       000001EF
return_A_H2                       000001E1
return_A_M1                       0000020B
return_A_M2                       000001FD
return_COR_H1                     0000029C
return_COR_H1_A                   000003A1
return_COR_H1_A_minus             000003DE
MPASM 5.75                          MAIN.ASM   10-27-2017  12:34:42         PAGE 39


SYMBOL TABLE
  LABEL                             VALUE 

return_COR_H1_MIN                 000002F1
return_COR_H2                     00000290
return_COR_H2_A                   00000395
return_COR_H2_A_minus             000003D2
return_COR_H2_MIN                 000002E5
return_COR_M1                     000002AE
return_COR_M1_A                   000003B3
return_COR_M1_A_minus             000003F0
return_COR_M1_MIN                 00000303
return_COR_M2                     000002A6
return_COR_M2_A                   000003AB
return_COR_M2_A_minus             000003E8
return_COR_M2_MIN                 000002FB
return_COR_S1                     000002BE
return_COR_S1_MIN                 00000313
return_COR_S2                     000002B6
return_COR_S2_MIN                 0000030B
return_DAY                        000001C3
return_H1                         00000179
return_H2                         0000016B
return_M1                         00000195
return_M2                         00000187
return_S1                         000001B1
return_S2                         000001A3
saturday                          000000FD
save_A                            000003F1
save_T                            00000314
save_day_ch                       0000035B
save_end_day                      00000364
sunday                            00000104
t1                                00000297
t2                                000002F0
ta1                               0000039C
ta2                               000003DD
ten_clock                         00000097
three_H1                          0000029D
three_H1_A                        000003A2
three_H1_minus                    000002F2
three_H1_minus_A                  000003DF
thursday                          000000EF
time_plus_blink                   0000010B
tuesday                           000000E1
wait                              
wednesday                         000000E8
write                             00000128

Errors   :     0
Warnings :     3 reported,     0 suppressed
Messages :     2 reported,    12 suppressed

